function Traverse(t, e) {
  this.$element=t, this.options=$.extend({}, Traverse.defaults, this.$element.data(), e), this._init();
}$(function() {
  let s; let a; let n; let o; const t=$('#sidebar'); t.length&&($('#docs'), new Traverse(s=t.find('nav'), {threshold: 10, barOffset: t.position().top}), s.on('update.traverse', function(t, e) {
    s.find('section').removeClass('expand'); const i=e.parents('section:first'); i.length&&i.addClass('expand');
  }), a=$('.drawer-layout'), n=a.find('.drawer'), o=function() {
    return n.removeClass('slide-right slide-left'), n.find('.drawer-overlay').remove(), a.removeClass('drawer-open drawer-slide-left-large drawer-slide-right-large'), !1;
  }, a.find('[data-drawer-slide]').click(function(t) {
    const e=$(this).data('drawer-slide'); a.addClass('drawer-open'), n.addClass('slide-'+e); const i=$('<a href="#" class="drawer-overlay"></a>'); return n.append(i), i.click(o), !1;
  }), a.find('[data-drawer-close]').click(o));
}), Traverse.defaults={animationDuration: 500, animationEasing: 'linear', threshold: 50, activeClass: 'active', deepLinking: !1, barOffset: 0}, Traverse.prototype._init=function() {
  const t=this.$element[0].id; this.$targets=$('[data-traverse-target]'), this.$links=this.$element.find('a'), this.$element.attr({'data-resize': t, 'data-scroll': t, 'id': t}), this.$active=$(), this.scrollPos=parseInt(window.pageYOffset, 10), this._events();
}, Traverse.prototype.calcPoints=function() {
  const i=this; const t=document.body; const e=document.documentElement; this.points=[], this.winHeight=Math.round(Math.max(window.innerHeight, e.clientHeight)), this.docHeight=Math.round(Math.max(t.scrollHeight, t.offsetHeight, e.clientHeight, e.scrollHeight, e.offsetHeight)), this.$targets.each(function() {
    const t=$(this); const e=t.offset().top; t.targetPoint=e, i.points.push(e);
  });
}, Traverse.prototype._events=function() {
  const s=this; const a=$('html, body'); const n={duration: s.options.animationDuration, easing: s.options.animationEasing}; $(window).one('load', function() {
    s.calcPoints(), s._updateActive(), $(this).resize(function(t) {
      s.reflow();
    }).scroll(function(t) {
      s._updateActive();
    });
  }), this.$element.on('click', 'a[href^="#"]', function(t) {
    t.preventDefault(); const e=this.getAttribute('href').replace(/\./g, '\\.'); const i=$(e).offset().top-s.options.barOffset; a.stop(!0).animate({scrollTop: i}, n);
  });
}, Traverse.prototype.reflow=function() {
  this.calcPoints(), this._updateActive();
}, Traverse.prototype._updateActive=function() {
  let i; let s; let t; let e; const a=parseInt(window.pageYOffset, 10); e=a+this.winHeight===this.docHeight?this.points.length-1:a<this.points[0]?0:(i=this.scrollPos<a, (t=(s=this).points.filter(function(t, e) {
    return i?t<=a+s.options.barOffset+s.options.threshold:t-(s.options.barOffset+s.options.threshold)<=a;
  })).length?t.length-1:0); let n; const o=this.$active; const r=this.$links.eq(e); this.$active.removeClass(this.options.activeClass), this.$active=r.addClass(this.options.activeClass), this.options.deepLinking&&(n=this.$active[0].getAttribute('href'), window.history.pushState?window.history.pushState(null, null, n):window.location.hash=n), this.scrollPos=a, o[0]!==r[0]&&this.$element.trigger('update.traverse', [this.$active]);
};
